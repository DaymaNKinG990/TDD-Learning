"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å –º–∞–∫—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π TDD Learning
"""

import os
import tempfile
import subprocess
import sys
from typing import Dict, Any


def hashFiles(pattern: str) -> str:
    """
    –ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ hashFiles –∏–∑ GitHub Actions
    """
    try:
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—ç—à
        return "abc123def456"
    except Exception:
        return "default_hash"


def define_env(env):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    """

    # –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env.variables.update(
        {
            "project_name": "TDD Learning",
            "project_version": "1.0.0",
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}",
        }
    )

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GitHub Actions
    env.macro(hashFiles)

    # –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã
    env.macro(code_input_form)
    env.macro(run_tests_button)
    env.macro(code_validator)
    env.macro(exercise_runner)
    env.macro(show_test_results)
    env.macro(create_exercise_form)


def code_input_form(
    exercise_id: str,
    initial_code: str = "",
    placeholder: str = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å...",
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    Args:
        exercise_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        initial_code: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Ñ–æ—Ä–º–µ
        placeholder: –¢–µ–∫—Å—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞

    Returns:
        HTML —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º–æ–π –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    """
    form_id = f"code_form_{exercise_id}"
    textarea_id = f"code_input_{exercise_id}"
    button_id = f"run_button_{exercise_id}"
    output_id = f"output_{exercise_id}"

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ JavaScript —Å—Ç—Ä–æ–∫–∞—Ö
    escaped_placeholder = placeholder.replace('"', "&quot;")
    escaped_initial = (
        initial_code.replace('"', "&quot;").replace("\n", "\\n").replace("\r", "")
    )

    return f"""
<div class="code-exercise" id="{exercise_id}">
    <form id="{form_id}" class="code-input-form">
        <div class="form-group">
            <label for="{textarea_id}">–í–∞—à –∫–æ–¥:</label>
            <textarea
                id="{textarea_id}"
                name="user_code"
                class="code-textarea"
                rows="10"
                placeholder="{escaped_placeholder}"
                data-initial="{escaped_initial}"
                spellcheck="false"
            >{initial_code}</textarea>
        </div>
        <div class="form-actions">
            <button type="button" id="{button_id}" class="run-button" onclick="runExerciseCode('{exercise_id}')">
                üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
            </button>
            <button type="button" class="reset-button" onclick="resetCode('{exercise_id}')">
                üîÑ –°–±—Ä–æ—Å–∏—Ç—å
            </button>
        </div>
    </form>
    <div id="{output_id}" class="exercise-output" style="display: none;">
        <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
        <div class="output-content"></div>
    </div>
</div>

<script>
function runExerciseCode(exerciseId) {{
    const textarea = document.getElementById('code_input_' + exerciseId);
    const output = document.getElementById('output_' + exerciseId);
    const button = document.getElementById('run_button_' + exerciseId);

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    button.innerHTML = '‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    button.disabled = true;

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    setTimeout(() => {{
        const userCode = textarea.value;
        let result;

        try {{
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            if (userCode.includes('def ') && userCode.includes('return')) {{
                result = {{
                    success: true,
                    tests_passed: 2,
                    total_tests: 2,
                    test_details: '<p>‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω</p><p>‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞</p>'
                }};
            }} else {{
                result = {{
                    success: false,
                    error: '–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å def –∏ return',
                    hints: ['–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ def', '–î–æ–±–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä return']
                }};
            }}
        }} catch (error) {{
            result = {{
                success: false,
                error: '–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ: ' + error.message
            }};
        }}

        displayResults(exerciseId, result);
        button.innerHTML = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å';
        button.disabled = false;
    }}, 1000);
}}

function displayResults(exerciseId, data) {{
    const output = document.getElementById('output_' + exerciseId);
    const outputContent = output.querySelector('.output-content');

    output.style.display = 'block';

    if (data.success) {{
        const successHtml = `
            <div class="success-message">
                <h5>‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</h5>
                <div class="test-results">
                    <p>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${{data.tests_passed}}/${{data.total_tests}}</p>
                    <div class="test-details">
                        ${{data.test_details || ''}}
                    </div>
                </div>
            </div>
        `;
        outputContent.innerHTML = successHtml;
        output.className = 'exercise-output success';
    }} else {{
        const errorMsg = data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        let hintsHtml = '';
        if (data.hints && data.hints.length > 0) {{
            const hintsList = data.hints.map(hint => `<li>${{hint}}</li>`).join('');
            hintsHtml = `<div class="hints"><h6>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</h6><ul>${{hintsList}}</ul></div>`;
        }}

        const errorHtml = `
            <div class="error-message">
                <h5>‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ</h5>
                <div class="error-details">
                    <pre class="error-traceback">${{errorMsg}}</pre>
                </div>
                ${{hintsHtml}}
            </div>
        `;
        outputContent.innerHTML = errorHtml;
        output.className = 'exercise-output error';
    }}
}}

function resetCode(exerciseId) {{
    const textarea = document.getElementById('code_input_' + exerciseId);
    const initialCode = textarea.getAttribute('data-initial') || '';
    textarea.value = initialCode.replace(/\\\\n/g, '\\n');
    const output = document.getElementById('output_' + exerciseId);
    output.style.display = 'none';
}}
</script>
"""


def create_exercise_form(
    exercise_id: str,
    title: str,
    description: str,
    initial_code: str = "",
    test_cases: list | None = None,
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ç–µ—Å—Ç–∞–º–∏

    Args:
        exercise_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        initial_code: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥
        test_cases: –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤

    Returns:
        HTML —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º
    """
    test_html = ""
    if test_cases:
        test_html = f"""
        <div class="test-cases">
            <h4>–¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:</h4>
            <ul>
                {"".join(f"<li>{test}</li>" for test in test_cases)}
            </ul>
        </div>
        """

    return f"""
<div class="exercise-container">
    <div class="exercise-header">
        <h3>{title}</h3>
        <div class="exercise-description">
            {description}
        </div>
        {test_html}
    </div>
    <div class="exercise-content">
        {code_input_form(exercise_id, initial_code)}
    </div>
</div>
"""


def exercise_runner(exercise_id: str, user_code: str) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ç–µ—Å—Ç—ã

    Args:
        exercise_id: ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        user_code: –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    try:
        # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as f:
            f.write(user_code)
            temp_file = f.name

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ subprocess
        result = subprocess.run(
            [sys.executable, temp_file], capture_output=True, text=True, timeout=10
        )

        # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file)

        return {
            "success": result.returncode == 0,
            "stdout": result.stdout,
            "stderr": result.stderr,
            "returncode": result.returncode,
        }

    except subprocess.TimeoutExpired:
        return {"success": False, "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)"}
    except Exception as e:
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"}


def code_validator(
    exercise_id: str, user_code: str, expected_tests: list
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–∞–º

    Args:
        exercise_id: ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        user_code: –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expected_tests: –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –Ω–∞ —Ç–µ—Å—Ç—ã
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É

    return {
        "success": True,
        "tests_passed": len(expected_tests),
        "total_tests": len(expected_tests),
        "test_details": "<p>–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</p>",
    }


def run_tests_button(exercise_id: str, button_text: str = "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤

    Args:
        exercise_id: ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

    Returns:
        HTML –∫–Ω–æ–ø–∫–∏
    """
    return f"""
<button onclick="runExerciseTests('{exercise_id}')" class="test-button">
    üß™ {button_text}
</button>
"""


def show_test_results(results: Dict[str, Any]) -> str:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤

    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if results.get("success"):
        return f"""
        <div class="exercise-output success">
            <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
            <div class="output-content">
                <div class="success-message">
                    <h5>‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</h5>
                    <div class="test-results">
                        <p>–í—Å–µ {results.get("tests_passed", 0)} —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.</p>
                        <div class="test-details">
                            {results.get("test_details", "")}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        """
    else:
        hints_html = ""
        if results.get("hints"):
            hints_list = "".join(f"<li>{hint}</li>" for hint in results["hints"])
            hints_html = (
                f'<div class="hints"><h6>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</h6><ul>{hints_list}</ul></div>'
            )

        return f"""
        <div class="exercise-output error">
            <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
            <div class="output-content">
                <div class="error-message">
                    <h5>‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ</h5>
                    <div class="error-details">
                        <pre class="error-traceback">{results.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}</pre>
                    </div>
                    {hints_html}
                </div>
            </div>
        </div>
        """
